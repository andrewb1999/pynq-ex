// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_kernel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=151,HLS_SYN_TPT=none,HLS_SYN_MEM=34,HLS_SYN_DSP=0,HLS_SYN_FF=3942,HLS_SYN_LUT=4084,HLS_VERSION=2020_2}" *)

module kernel (
        ap_clk,
        ap_rst_n,
        m_axi_m0_AWVALID,
        m_axi_m0_AWREADY,
        m_axi_m0_AWADDR,
        m_axi_m0_AWID,
        m_axi_m0_AWLEN,
        m_axi_m0_AWSIZE,
        m_axi_m0_AWBURST,
        m_axi_m0_AWLOCK,
        m_axi_m0_AWCACHE,
        m_axi_m0_AWPROT,
        m_axi_m0_AWQOS,
        m_axi_m0_AWREGION,
        m_axi_m0_AWUSER,
        m_axi_m0_WVALID,
        m_axi_m0_WREADY,
        m_axi_m0_WDATA,
        m_axi_m0_WSTRB,
        m_axi_m0_WLAST,
        m_axi_m0_WID,
        m_axi_m0_WUSER,
        m_axi_m0_ARVALID,
        m_axi_m0_ARREADY,
        m_axi_m0_ARADDR,
        m_axi_m0_ARID,
        m_axi_m0_ARLEN,
        m_axi_m0_ARSIZE,
        m_axi_m0_ARBURST,
        m_axi_m0_ARLOCK,
        m_axi_m0_ARCACHE,
        m_axi_m0_ARPROT,
        m_axi_m0_ARQOS,
        m_axi_m0_ARREGION,
        m_axi_m0_ARUSER,
        m_axi_m0_RVALID,
        m_axi_m0_RREADY,
        m_axi_m0_RDATA,
        m_axi_m0_RLAST,
        m_axi_m0_RID,
        m_axi_m0_RUSER,
        m_axi_m0_RRESP,
        m_axi_m0_BVALID,
        m_axi_m0_BREADY,
        m_axi_m0_BRESP,
        m_axi_m0_BID,
        m_axi_m0_BUSER,
        m_axi_m1_AWVALID,
        m_axi_m1_AWREADY,
        m_axi_m1_AWADDR,
        m_axi_m1_AWID,
        m_axi_m1_AWLEN,
        m_axi_m1_AWSIZE,
        m_axi_m1_AWBURST,
        m_axi_m1_AWLOCK,
        m_axi_m1_AWCACHE,
        m_axi_m1_AWPROT,
        m_axi_m1_AWQOS,
        m_axi_m1_AWREGION,
        m_axi_m1_AWUSER,
        m_axi_m1_WVALID,
        m_axi_m1_WREADY,
        m_axi_m1_WDATA,
        m_axi_m1_WSTRB,
        m_axi_m1_WLAST,
        m_axi_m1_WID,
        m_axi_m1_WUSER,
        m_axi_m1_ARVALID,
        m_axi_m1_ARREADY,
        m_axi_m1_ARADDR,
        m_axi_m1_ARID,
        m_axi_m1_ARLEN,
        m_axi_m1_ARSIZE,
        m_axi_m1_ARBURST,
        m_axi_m1_ARLOCK,
        m_axi_m1_ARCACHE,
        m_axi_m1_ARPROT,
        m_axi_m1_ARQOS,
        m_axi_m1_ARREGION,
        m_axi_m1_ARUSER,
        m_axi_m1_RVALID,
        m_axi_m1_RREADY,
        m_axi_m1_RDATA,
        m_axi_m1_RLAST,
        m_axi_m1_RID,
        m_axi_m1_RUSER,
        m_axi_m1_RRESP,
        m_axi_m1_BVALID,
        m_axi_m1_BREADY,
        m_axi_m1_BRESP,
        m_axi_m1_BID,
        m_axi_m1_BUSER,
        m_axi_m2_AWVALID,
        m_axi_m2_AWREADY,
        m_axi_m2_AWADDR,
        m_axi_m2_AWID,
        m_axi_m2_AWLEN,
        m_axi_m2_AWSIZE,
        m_axi_m2_AWBURST,
        m_axi_m2_AWLOCK,
        m_axi_m2_AWCACHE,
        m_axi_m2_AWPROT,
        m_axi_m2_AWQOS,
        m_axi_m2_AWREGION,
        m_axi_m2_AWUSER,
        m_axi_m2_WVALID,
        m_axi_m2_WREADY,
        m_axi_m2_WDATA,
        m_axi_m2_WSTRB,
        m_axi_m2_WLAST,
        m_axi_m2_WID,
        m_axi_m2_WUSER,
        m_axi_m2_ARVALID,
        m_axi_m2_ARREADY,
        m_axi_m2_ARADDR,
        m_axi_m2_ARID,
        m_axi_m2_ARLEN,
        m_axi_m2_ARSIZE,
        m_axi_m2_ARBURST,
        m_axi_m2_ARLOCK,
        m_axi_m2_ARCACHE,
        m_axi_m2_ARPROT,
        m_axi_m2_ARQOS,
        m_axi_m2_ARREGION,
        m_axi_m2_ARUSER,
        m_axi_m2_RVALID,
        m_axi_m2_RREADY,
        m_axi_m2_RDATA,
        m_axi_m2_RLAST,
        m_axi_m2_RID,
        m_axi_m2_RUSER,
        m_axi_m2_RRESP,
        m_axi_m2_BVALID,
        m_axi_m2_BREADY,
        m_axi_m2_BRESP,
        m_axi_m2_BID,
        m_axi_m2_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 144'd1;
parameter    ap_ST_fsm_state2 = 144'd2;
parameter    ap_ST_fsm_state3 = 144'd4;
parameter    ap_ST_fsm_state4 = 144'd8;
parameter    ap_ST_fsm_state5 = 144'd16;
parameter    ap_ST_fsm_state6 = 144'd32;
parameter    ap_ST_fsm_state7 = 144'd64;
parameter    ap_ST_fsm_state8 = 144'd128;
parameter    ap_ST_fsm_state9 = 144'd256;
parameter    ap_ST_fsm_state10 = 144'd512;
parameter    ap_ST_fsm_state11 = 144'd1024;
parameter    ap_ST_fsm_state12 = 144'd2048;
parameter    ap_ST_fsm_state13 = 144'd4096;
parameter    ap_ST_fsm_state14 = 144'd8192;
parameter    ap_ST_fsm_state15 = 144'd16384;
parameter    ap_ST_fsm_state16 = 144'd32768;
parameter    ap_ST_fsm_state17 = 144'd65536;
parameter    ap_ST_fsm_state18 = 144'd131072;
parameter    ap_ST_fsm_state19 = 144'd262144;
parameter    ap_ST_fsm_state20 = 144'd524288;
parameter    ap_ST_fsm_state21 = 144'd1048576;
parameter    ap_ST_fsm_state22 = 144'd2097152;
parameter    ap_ST_fsm_state23 = 144'd4194304;
parameter    ap_ST_fsm_state24 = 144'd8388608;
parameter    ap_ST_fsm_state25 = 144'd16777216;
parameter    ap_ST_fsm_state26 = 144'd33554432;
parameter    ap_ST_fsm_state27 = 144'd67108864;
parameter    ap_ST_fsm_state28 = 144'd134217728;
parameter    ap_ST_fsm_state29 = 144'd268435456;
parameter    ap_ST_fsm_state30 = 144'd536870912;
parameter    ap_ST_fsm_state31 = 144'd1073741824;
parameter    ap_ST_fsm_state32 = 144'd2147483648;
parameter    ap_ST_fsm_state33 = 144'd4294967296;
parameter    ap_ST_fsm_state34 = 144'd8589934592;
parameter    ap_ST_fsm_state35 = 144'd17179869184;
parameter    ap_ST_fsm_state36 = 144'd34359738368;
parameter    ap_ST_fsm_state37 = 144'd68719476736;
parameter    ap_ST_fsm_state38 = 144'd137438953472;
parameter    ap_ST_fsm_state39 = 144'd274877906944;
parameter    ap_ST_fsm_state40 = 144'd549755813888;
parameter    ap_ST_fsm_state41 = 144'd1099511627776;
parameter    ap_ST_fsm_state42 = 144'd2199023255552;
parameter    ap_ST_fsm_state43 = 144'd4398046511104;
parameter    ap_ST_fsm_state44 = 144'd8796093022208;
parameter    ap_ST_fsm_state45 = 144'd17592186044416;
parameter    ap_ST_fsm_state46 = 144'd35184372088832;
parameter    ap_ST_fsm_state47 = 144'd70368744177664;
parameter    ap_ST_fsm_state48 = 144'd140737488355328;
parameter    ap_ST_fsm_state49 = 144'd281474976710656;
parameter    ap_ST_fsm_state50 = 144'd562949953421312;
parameter    ap_ST_fsm_state51 = 144'd1125899906842624;
parameter    ap_ST_fsm_state52 = 144'd2251799813685248;
parameter    ap_ST_fsm_state53 = 144'd4503599627370496;
parameter    ap_ST_fsm_state54 = 144'd9007199254740992;
parameter    ap_ST_fsm_state55 = 144'd18014398509481984;
parameter    ap_ST_fsm_state56 = 144'd36028797018963968;
parameter    ap_ST_fsm_state57 = 144'd72057594037927936;
parameter    ap_ST_fsm_state58 = 144'd144115188075855872;
parameter    ap_ST_fsm_state59 = 144'd288230376151711744;
parameter    ap_ST_fsm_state60 = 144'd576460752303423488;
parameter    ap_ST_fsm_state61 = 144'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 144'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 144'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 144'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 144'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 144'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 144'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 144'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 144'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 144'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 144'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 144'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 144'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 144'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 144'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 144'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 144'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 144'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 144'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 144'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 144'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 144'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 144'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 144'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 144'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 144'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 144'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 144'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 144'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 144'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 144'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 144'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 144'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 144'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 144'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 144'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 144'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 144'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 144'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 144'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 144'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 144'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 144'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 144'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 144'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 144'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 144'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 144'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 144'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 144'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 144'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 144'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 144'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 144'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 144'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 144'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 144'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 144'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 144'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 144'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 144'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 144'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 144'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 144'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 144'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 144'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 144'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 144'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 144'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 144'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 144'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 144'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 144'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 144'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 144'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 144'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 144'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 144'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 144'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 144'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 144'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 144'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 144'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 144'd11150372599265311570767859136324180752990208;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M0_ID_WIDTH = 1;
parameter    C_M_AXI_M0_ADDR_WIDTH = 64;
parameter    C_M_AXI_M0_DATA_WIDTH = 256;
parameter    C_M_AXI_M0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M0_WUSER_WIDTH = 1;
parameter    C_M_AXI_M0_RUSER_WIDTH = 1;
parameter    C_M_AXI_M0_BUSER_WIDTH = 1;
parameter    C_M_AXI_M0_USER_VALUE = 0;
parameter    C_M_AXI_M0_PROT_VALUE = 0;
parameter    C_M_AXI_M0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_M1_ID_WIDTH = 1;
parameter    C_M_AXI_M1_ADDR_WIDTH = 64;
parameter    C_M_AXI_M1_DATA_WIDTH = 256;
parameter    C_M_AXI_M1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M1_WUSER_WIDTH = 1;
parameter    C_M_AXI_M1_RUSER_WIDTH = 1;
parameter    C_M_AXI_M1_BUSER_WIDTH = 1;
parameter    C_M_AXI_M1_USER_VALUE = 0;
parameter    C_M_AXI_M1_PROT_VALUE = 0;
parameter    C_M_AXI_M1_CACHE_VALUE = 3;
parameter    C_M_AXI_M2_ID_WIDTH = 1;
parameter    C_M_AXI_M2_ADDR_WIDTH = 64;
parameter    C_M_AXI_M2_DATA_WIDTH = 32;
parameter    C_M_AXI_M2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M2_WUSER_WIDTH = 1;
parameter    C_M_AXI_M2_RUSER_WIDTH = 1;
parameter    C_M_AXI_M2_BUSER_WIDTH = 1;
parameter    C_M_AXI_M2_USER_VALUE = 0;
parameter    C_M_AXI_M2_PROT_VALUE = 0;
parameter    C_M_AXI_M2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M0_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M1_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_M2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_m0_AWVALID;
input   m_axi_m0_AWREADY;
output  [C_M_AXI_M0_ADDR_WIDTH - 1:0] m_axi_m0_AWADDR;
output  [C_M_AXI_M0_ID_WIDTH - 1:0] m_axi_m0_AWID;
output  [7:0] m_axi_m0_AWLEN;
output  [2:0] m_axi_m0_AWSIZE;
output  [1:0] m_axi_m0_AWBURST;
output  [1:0] m_axi_m0_AWLOCK;
output  [3:0] m_axi_m0_AWCACHE;
output  [2:0] m_axi_m0_AWPROT;
output  [3:0] m_axi_m0_AWQOS;
output  [3:0] m_axi_m0_AWREGION;
output  [C_M_AXI_M0_AWUSER_WIDTH - 1:0] m_axi_m0_AWUSER;
output   m_axi_m0_WVALID;
input   m_axi_m0_WREADY;
output  [C_M_AXI_M0_DATA_WIDTH - 1:0] m_axi_m0_WDATA;
output  [C_M_AXI_M0_WSTRB_WIDTH - 1:0] m_axi_m0_WSTRB;
output   m_axi_m0_WLAST;
output  [C_M_AXI_M0_ID_WIDTH - 1:0] m_axi_m0_WID;
output  [C_M_AXI_M0_WUSER_WIDTH - 1:0] m_axi_m0_WUSER;
output   m_axi_m0_ARVALID;
input   m_axi_m0_ARREADY;
output  [C_M_AXI_M0_ADDR_WIDTH - 1:0] m_axi_m0_ARADDR;
output  [C_M_AXI_M0_ID_WIDTH - 1:0] m_axi_m0_ARID;
output  [7:0] m_axi_m0_ARLEN;
output  [2:0] m_axi_m0_ARSIZE;
output  [1:0] m_axi_m0_ARBURST;
output  [1:0] m_axi_m0_ARLOCK;
output  [3:0] m_axi_m0_ARCACHE;
output  [2:0] m_axi_m0_ARPROT;
output  [3:0] m_axi_m0_ARQOS;
output  [3:0] m_axi_m0_ARREGION;
output  [C_M_AXI_M0_ARUSER_WIDTH - 1:0] m_axi_m0_ARUSER;
input   m_axi_m0_RVALID;
output   m_axi_m0_RREADY;
input  [C_M_AXI_M0_DATA_WIDTH - 1:0] m_axi_m0_RDATA;
input   m_axi_m0_RLAST;
input  [C_M_AXI_M0_ID_WIDTH - 1:0] m_axi_m0_RID;
input  [C_M_AXI_M0_RUSER_WIDTH - 1:0] m_axi_m0_RUSER;
input  [1:0] m_axi_m0_RRESP;
input   m_axi_m0_BVALID;
output   m_axi_m0_BREADY;
input  [1:0] m_axi_m0_BRESP;
input  [C_M_AXI_M0_ID_WIDTH - 1:0] m_axi_m0_BID;
input  [C_M_AXI_M0_BUSER_WIDTH - 1:0] m_axi_m0_BUSER;
output   m_axi_m1_AWVALID;
input   m_axi_m1_AWREADY;
output  [C_M_AXI_M1_ADDR_WIDTH - 1:0] m_axi_m1_AWADDR;
output  [C_M_AXI_M1_ID_WIDTH - 1:0] m_axi_m1_AWID;
output  [7:0] m_axi_m1_AWLEN;
output  [2:0] m_axi_m1_AWSIZE;
output  [1:0] m_axi_m1_AWBURST;
output  [1:0] m_axi_m1_AWLOCK;
output  [3:0] m_axi_m1_AWCACHE;
output  [2:0] m_axi_m1_AWPROT;
output  [3:0] m_axi_m1_AWQOS;
output  [3:0] m_axi_m1_AWREGION;
output  [C_M_AXI_M1_AWUSER_WIDTH - 1:0] m_axi_m1_AWUSER;
output   m_axi_m1_WVALID;
input   m_axi_m1_WREADY;
output  [C_M_AXI_M1_DATA_WIDTH - 1:0] m_axi_m1_WDATA;
output  [C_M_AXI_M1_WSTRB_WIDTH - 1:0] m_axi_m1_WSTRB;
output   m_axi_m1_WLAST;
output  [C_M_AXI_M1_ID_WIDTH - 1:0] m_axi_m1_WID;
output  [C_M_AXI_M1_WUSER_WIDTH - 1:0] m_axi_m1_WUSER;
output   m_axi_m1_ARVALID;
input   m_axi_m1_ARREADY;
output  [C_M_AXI_M1_ADDR_WIDTH - 1:0] m_axi_m1_ARADDR;
output  [C_M_AXI_M1_ID_WIDTH - 1:0] m_axi_m1_ARID;
output  [7:0] m_axi_m1_ARLEN;
output  [2:0] m_axi_m1_ARSIZE;
output  [1:0] m_axi_m1_ARBURST;
output  [1:0] m_axi_m1_ARLOCK;
output  [3:0] m_axi_m1_ARCACHE;
output  [2:0] m_axi_m1_ARPROT;
output  [3:0] m_axi_m1_ARQOS;
output  [3:0] m_axi_m1_ARREGION;
output  [C_M_AXI_M1_ARUSER_WIDTH - 1:0] m_axi_m1_ARUSER;
input   m_axi_m1_RVALID;
output   m_axi_m1_RREADY;
input  [C_M_AXI_M1_DATA_WIDTH - 1:0] m_axi_m1_RDATA;
input   m_axi_m1_RLAST;
input  [C_M_AXI_M1_ID_WIDTH - 1:0] m_axi_m1_RID;
input  [C_M_AXI_M1_RUSER_WIDTH - 1:0] m_axi_m1_RUSER;
input  [1:0] m_axi_m1_RRESP;
input   m_axi_m1_BVALID;
output   m_axi_m1_BREADY;
input  [1:0] m_axi_m1_BRESP;
input  [C_M_AXI_M1_ID_WIDTH - 1:0] m_axi_m1_BID;
input  [C_M_AXI_M1_BUSER_WIDTH - 1:0] m_axi_m1_BUSER;
output   m_axi_m2_AWVALID;
input   m_axi_m2_AWREADY;
output  [C_M_AXI_M2_ADDR_WIDTH - 1:0] m_axi_m2_AWADDR;
output  [C_M_AXI_M2_ID_WIDTH - 1:0] m_axi_m2_AWID;
output  [7:0] m_axi_m2_AWLEN;
output  [2:0] m_axi_m2_AWSIZE;
output  [1:0] m_axi_m2_AWBURST;
output  [1:0] m_axi_m2_AWLOCK;
output  [3:0] m_axi_m2_AWCACHE;
output  [2:0] m_axi_m2_AWPROT;
output  [3:0] m_axi_m2_AWQOS;
output  [3:0] m_axi_m2_AWREGION;
output  [C_M_AXI_M2_AWUSER_WIDTH - 1:0] m_axi_m2_AWUSER;
output   m_axi_m2_WVALID;
input   m_axi_m2_WREADY;
output  [C_M_AXI_M2_DATA_WIDTH - 1:0] m_axi_m2_WDATA;
output  [C_M_AXI_M2_WSTRB_WIDTH - 1:0] m_axi_m2_WSTRB;
output   m_axi_m2_WLAST;
output  [C_M_AXI_M2_ID_WIDTH - 1:0] m_axi_m2_WID;
output  [C_M_AXI_M2_WUSER_WIDTH - 1:0] m_axi_m2_WUSER;
output   m_axi_m2_ARVALID;
input   m_axi_m2_ARREADY;
output  [C_M_AXI_M2_ADDR_WIDTH - 1:0] m_axi_m2_ARADDR;
output  [C_M_AXI_M2_ID_WIDTH - 1:0] m_axi_m2_ARID;
output  [7:0] m_axi_m2_ARLEN;
output  [2:0] m_axi_m2_ARSIZE;
output  [1:0] m_axi_m2_ARBURST;
output  [1:0] m_axi_m2_ARLOCK;
output  [3:0] m_axi_m2_ARCACHE;
output  [2:0] m_axi_m2_ARPROT;
output  [3:0] m_axi_m2_ARQOS;
output  [3:0] m_axi_m2_ARREGION;
output  [C_M_AXI_M2_ARUSER_WIDTH - 1:0] m_axi_m2_ARUSER;
input   m_axi_m2_RVALID;
output   m_axi_m2_RREADY;
input  [C_M_AXI_M2_DATA_WIDTH - 1:0] m_axi_m2_RDATA;
input   m_axi_m2_RLAST;
input  [C_M_AXI_M2_ID_WIDTH - 1:0] m_axi_m2_RID;
input  [C_M_AXI_M2_RUSER_WIDTH - 1:0] m_axi_m2_RUSER;
input  [1:0] m_axi_m2_RRESP;
input   m_axi_m2_BVALID;
output   m_axi_m2_BREADY;
input  [1:0] m_axi_m2_BRESP;
input  [C_M_AXI_M2_ID_WIDTH - 1:0] m_axi_m2_BID;
input  [C_M_AXI_M2_BUSER_WIDTH - 1:0] m_axi_m2_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [143:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] A;
wire   [63:0] B;
wire   [63:0] v;
reg    m0_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    m0_blk_n_R;
wire    ap_CS_fsm_state72;
reg    m1_blk_n_AR;
reg    m1_blk_n_R;
reg    m2_blk_n_AR;
reg    m2_blk_n_R;
reg    m2_blk_n_AW;
wire    ap_CS_fsm_state75;
reg    m2_blk_n_W;
wire    ap_CS_fsm_state76;
reg    m2_blk_n_B;
wire    ap_CS_fsm_state144;
wire    m0_AWREADY;
wire    m0_WREADY;
reg    m0_ARVALID;
wire    m0_ARREADY;
wire    m0_RVALID;
reg    m0_RREADY;
wire   [255:0] m0_RDATA;
wire    m0_RLAST;
wire   [0:0] m0_RID;
wire   [0:0] m0_RUSER;
wire   [1:0] m0_RRESP;
wire    m0_BVALID;
wire   [1:0] m0_BRESP;
wire   [0:0] m0_BID;
wire   [0:0] m0_BUSER;
wire    m1_AWREADY;
wire    m1_WREADY;
reg    m1_ARVALID;
wire    m1_ARREADY;
wire    m1_RVALID;
reg    m1_RREADY;
wire   [255:0] m1_RDATA;
wire    m1_RLAST;
wire   [0:0] m1_RID;
wire   [0:0] m1_RUSER;
wire   [1:0] m1_RRESP;
wire    m1_BVALID;
wire   [1:0] m1_BRESP;
wire   [0:0] m1_BID;
wire   [0:0] m1_BUSER;
reg    m2_AWVALID;
wire    m2_AWREADY;
reg    m2_WVALID;
wire    m2_WREADY;
reg    m2_ARVALID;
wire    m2_ARREADY;
wire    m2_RVALID;
reg    m2_RREADY;
wire   [31:0] m2_RDATA;
wire    m2_RLAST;
wire   [0:0] m2_RID;
wire   [0:0] m2_RUSER;
wire   [1:0] m2_RRESP;
wire    m2_BVALID;
reg    m2_BREADY;
wire   [1:0] m2_BRESP;
wire   [0:0] m2_BID;
wire   [0:0] m2_BUSER;
reg   [63:0] m2_addr_reg_334;
reg   [58:0] trunc_ln9_reg_341;
reg   [58:0] trunc_ln9_1_reg_346;
reg   [31:0] m2_addr_read_reg_363;
reg   [255:0] m0_addr_read_reg_368;
reg   [255:0] m1_addr_read_reg_373;
wire   [3:0] add_ln9_fu_274_p2;
wire    ap_CS_fsm_state74;
wire   [255:0] zext_ln215_fu_300_p1;
wire   [0:0] icmp_ln9_fu_280_p2;
wire   [255:0] zext_ln215_1_fu_318_p1;
wire   [31:0] add_ln691_fu_328_p2;
reg   [3:0] i_reg_174;
wire    ap_CS_fsm_state73;
reg   [31:0] empty_reg_185;
reg   [255:0] shiftreg_reg_196;
reg   [255:0] shiftreg10_reg_205;
wire  signed [63:0] sext_ln691_fu_224_p1;
wire   [63:0] sext_ln9_fu_254_p1;
wire   [63:0] sext_ln9_1_fu_264_p1;
reg    ap_block_state2_io;
reg    ap_block_state72;
reg    ap_block_state1;
wire   [61:0] trunc_ln_fu_214_p4;
wire   [223:0] lshr_ln_fu_290_p4;
wire   [223:0] lshr_ln215_1_fu_308_p4;
wire  signed [31:0] dot_fu_322_p0;
wire  signed [31:0] dot_fu_322_p1;
wire   [31:0] dot_fu_322_p2;
reg   [143:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 144'd1;
end

kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .B(B),
    .v(v),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(1'b1),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

kernel_m0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M0_CACHE_VALUE ))
m0_m_axi_U(
    .AWVALID(m_axi_m0_AWVALID),
    .AWREADY(m_axi_m0_AWREADY),
    .AWADDR(m_axi_m0_AWADDR),
    .AWID(m_axi_m0_AWID),
    .AWLEN(m_axi_m0_AWLEN),
    .AWSIZE(m_axi_m0_AWSIZE),
    .AWBURST(m_axi_m0_AWBURST),
    .AWLOCK(m_axi_m0_AWLOCK),
    .AWCACHE(m_axi_m0_AWCACHE),
    .AWPROT(m_axi_m0_AWPROT),
    .AWQOS(m_axi_m0_AWQOS),
    .AWREGION(m_axi_m0_AWREGION),
    .AWUSER(m_axi_m0_AWUSER),
    .WVALID(m_axi_m0_WVALID),
    .WREADY(m_axi_m0_WREADY),
    .WDATA(m_axi_m0_WDATA),
    .WSTRB(m_axi_m0_WSTRB),
    .WLAST(m_axi_m0_WLAST),
    .WID(m_axi_m0_WID),
    .WUSER(m_axi_m0_WUSER),
    .ARVALID(m_axi_m0_ARVALID),
    .ARREADY(m_axi_m0_ARREADY),
    .ARADDR(m_axi_m0_ARADDR),
    .ARID(m_axi_m0_ARID),
    .ARLEN(m_axi_m0_ARLEN),
    .ARSIZE(m_axi_m0_ARSIZE),
    .ARBURST(m_axi_m0_ARBURST),
    .ARLOCK(m_axi_m0_ARLOCK),
    .ARCACHE(m_axi_m0_ARCACHE),
    .ARPROT(m_axi_m0_ARPROT),
    .ARQOS(m_axi_m0_ARQOS),
    .ARREGION(m_axi_m0_ARREGION),
    .ARUSER(m_axi_m0_ARUSER),
    .RVALID(m_axi_m0_RVALID),
    .RREADY(m_axi_m0_RREADY),
    .RDATA(m_axi_m0_RDATA),
    .RLAST(m_axi_m0_RLAST),
    .RID(m_axi_m0_RID),
    .RUSER(m_axi_m0_RUSER),
    .RRESP(m_axi_m0_RRESP),
    .BVALID(m_axi_m0_BVALID),
    .BREADY(m_axi_m0_BREADY),
    .BRESP(m_axi_m0_BRESP),
    .BID(m_axi_m0_BID),
    .BUSER(m_axi_m0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(m0_ARVALID),
    .I_ARREADY(m0_ARREADY),
    .I_ARADDR(sext_ln9_fu_254_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m0_RVALID),
    .I_RREADY(m0_RREADY),
    .I_RDATA(m0_RDATA),
    .I_RID(m0_RID),
    .I_RUSER(m0_RUSER),
    .I_RRESP(m0_RRESP),
    .I_RLAST(m0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(m0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(m0_WREADY),
    .I_WDATA(256'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(32'd0),
    .I_BVALID(m0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(m0_BRESP),
    .I_BID(m0_BID),
    .I_BUSER(m0_BUSER)
);

kernel_m1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M1_CACHE_VALUE ))
m1_m_axi_U(
    .AWVALID(m_axi_m1_AWVALID),
    .AWREADY(m_axi_m1_AWREADY),
    .AWADDR(m_axi_m1_AWADDR),
    .AWID(m_axi_m1_AWID),
    .AWLEN(m_axi_m1_AWLEN),
    .AWSIZE(m_axi_m1_AWSIZE),
    .AWBURST(m_axi_m1_AWBURST),
    .AWLOCK(m_axi_m1_AWLOCK),
    .AWCACHE(m_axi_m1_AWCACHE),
    .AWPROT(m_axi_m1_AWPROT),
    .AWQOS(m_axi_m1_AWQOS),
    .AWREGION(m_axi_m1_AWREGION),
    .AWUSER(m_axi_m1_AWUSER),
    .WVALID(m_axi_m1_WVALID),
    .WREADY(m_axi_m1_WREADY),
    .WDATA(m_axi_m1_WDATA),
    .WSTRB(m_axi_m1_WSTRB),
    .WLAST(m_axi_m1_WLAST),
    .WID(m_axi_m1_WID),
    .WUSER(m_axi_m1_WUSER),
    .ARVALID(m_axi_m1_ARVALID),
    .ARREADY(m_axi_m1_ARREADY),
    .ARADDR(m_axi_m1_ARADDR),
    .ARID(m_axi_m1_ARID),
    .ARLEN(m_axi_m1_ARLEN),
    .ARSIZE(m_axi_m1_ARSIZE),
    .ARBURST(m_axi_m1_ARBURST),
    .ARLOCK(m_axi_m1_ARLOCK),
    .ARCACHE(m_axi_m1_ARCACHE),
    .ARPROT(m_axi_m1_ARPROT),
    .ARQOS(m_axi_m1_ARQOS),
    .ARREGION(m_axi_m1_ARREGION),
    .ARUSER(m_axi_m1_ARUSER),
    .RVALID(m_axi_m1_RVALID),
    .RREADY(m_axi_m1_RREADY),
    .RDATA(m_axi_m1_RDATA),
    .RLAST(m_axi_m1_RLAST),
    .RID(m_axi_m1_RID),
    .RUSER(m_axi_m1_RUSER),
    .RRESP(m_axi_m1_RRESP),
    .BVALID(m_axi_m1_BVALID),
    .BREADY(m_axi_m1_BREADY),
    .BRESP(m_axi_m1_BRESP),
    .BID(m_axi_m1_BID),
    .BUSER(m_axi_m1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(m1_ARVALID),
    .I_ARREADY(m1_ARREADY),
    .I_ARADDR(sext_ln9_1_fu_264_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m1_RVALID),
    .I_RREADY(m1_RREADY),
    .I_RDATA(m1_RDATA),
    .I_RID(m1_RID),
    .I_RUSER(m1_RUSER),
    .I_RRESP(m1_RRESP),
    .I_RLAST(m1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(m1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(m1_WREADY),
    .I_WDATA(256'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(32'd0),
    .I_BVALID(m1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(m1_BRESP),
    .I_BID(m1_BID),
    .I_BUSER(m1_BUSER)
);

kernel_m2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M2_CACHE_VALUE ))
m2_m_axi_U(
    .AWVALID(m_axi_m2_AWVALID),
    .AWREADY(m_axi_m2_AWREADY),
    .AWADDR(m_axi_m2_AWADDR),
    .AWID(m_axi_m2_AWID),
    .AWLEN(m_axi_m2_AWLEN),
    .AWSIZE(m_axi_m2_AWSIZE),
    .AWBURST(m_axi_m2_AWBURST),
    .AWLOCK(m_axi_m2_AWLOCK),
    .AWCACHE(m_axi_m2_AWCACHE),
    .AWPROT(m_axi_m2_AWPROT),
    .AWQOS(m_axi_m2_AWQOS),
    .AWREGION(m_axi_m2_AWREGION),
    .AWUSER(m_axi_m2_AWUSER),
    .WVALID(m_axi_m2_WVALID),
    .WREADY(m_axi_m2_WREADY),
    .WDATA(m_axi_m2_WDATA),
    .WSTRB(m_axi_m2_WSTRB),
    .WLAST(m_axi_m2_WLAST),
    .WID(m_axi_m2_WID),
    .WUSER(m_axi_m2_WUSER),
    .ARVALID(m_axi_m2_ARVALID),
    .ARREADY(m_axi_m2_ARREADY),
    .ARADDR(m_axi_m2_ARADDR),
    .ARID(m_axi_m2_ARID),
    .ARLEN(m_axi_m2_ARLEN),
    .ARSIZE(m_axi_m2_ARSIZE),
    .ARBURST(m_axi_m2_ARBURST),
    .ARLOCK(m_axi_m2_ARLOCK),
    .ARCACHE(m_axi_m2_ARCACHE),
    .ARPROT(m_axi_m2_ARPROT),
    .ARQOS(m_axi_m2_ARQOS),
    .ARREGION(m_axi_m2_ARREGION),
    .ARUSER(m_axi_m2_ARUSER),
    .RVALID(m_axi_m2_RVALID),
    .RREADY(m_axi_m2_RREADY),
    .RDATA(m_axi_m2_RDATA),
    .RLAST(m_axi_m2_RLAST),
    .RID(m_axi_m2_RID),
    .RUSER(m_axi_m2_RUSER),
    .RRESP(m_axi_m2_RRESP),
    .BVALID(m_axi_m2_BVALID),
    .BREADY(m_axi_m2_BREADY),
    .BRESP(m_axi_m2_BRESP),
    .BID(m_axi_m2_BID),
    .BUSER(m_axi_m2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(m2_ARVALID),
    .I_ARREADY(m2_ARREADY),
    .I_ARADDR(m2_addr_reg_334),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(m2_RVALID),
    .I_RREADY(m2_RREADY),
    .I_RDATA(m2_RDATA),
    .I_RID(m2_RID),
    .I_RUSER(m2_RUSER),
    .I_RRESP(m2_RRESP),
    .I_RLAST(m2_RLAST),
    .I_AWVALID(m2_AWVALID),
    .I_AWREADY(m2_AWREADY),
    .I_AWADDR(m2_addr_reg_334),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(m2_WVALID),
    .I_WREADY(m2_WREADY),
    .I_WDATA(empty_reg_185),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(m2_BVALID),
    .I_BREADY(m2_BREADY),
    .I_BRESP(m2_BRESP),
    .I_BID(m2_BID),
    .I_BUSER(m2_BUSER)
);

kernel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(dot_fu_322_p0),
    .din1(dot_fu_322_p1),
    .dout(dot_fu_322_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        empty_reg_185 <= m2_addr_read_reg_363;
    end else if (((icmp_ln9_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        empty_reg_185 <= add_ln691_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        i_reg_174 <= 4'd0;
    end else if (((icmp_ln9_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        i_reg_174 <= add_ln9_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        shiftreg10_reg_205 <= m1_addr_read_reg_373;
    end else if (((icmp_ln9_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        shiftreg10_reg_205 <= zext_ln215_1_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        shiftreg_reg_196 <= m0_addr_read_reg_368;
    end else if (((icmp_ln9_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        shiftreg_reg_196 <= zext_ln215_fu_300_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        m0_addr_read_reg_368 <= m0_RDATA;
        m1_addr_read_reg_373 <= m1_RDATA;
        m2_addr_read_reg_363 <= m2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        m2_addr_reg_334 <= sext_ln691_fu_224_p1;
        trunc_ln9_1_reg_346 <= {{B[63:5]}};
        trunc_ln9_reg_341 <= {{A[63:5]}};
    end
end

always @ (*) begin
    if (((m2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        m0_ARVALID = 1'b1;
    end else begin
        m0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m2_RVALID == 1'b0) | (m1_RVALID == 1'b0) | (m0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72))) begin
        m0_RREADY = 1'b1;
    end else begin
        m0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m0_blk_n_AR = m_axi_m0_ARREADY;
    end else begin
        m0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        m0_blk_n_R = m_axi_m0_RVALID;
    end else begin
        m0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        m1_ARVALID = 1'b1;
    end else begin
        m1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m2_RVALID == 1'b0) | (m1_RVALID == 1'b0) | (m0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72))) begin
        m1_RREADY = 1'b1;
    end else begin
        m1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m1_blk_n_AR = m_axi_m1_ARREADY;
    end else begin
        m1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        m1_blk_n_R = m_axi_m1_RVALID;
    end else begin
        m1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        m2_ARVALID = 1'b1;
    end else begin
        m2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        m2_AWVALID = 1'b1;
    end else begin
        m2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
        m2_BREADY = 1'b1;
    end else begin
        m2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((m2_RVALID == 1'b0) | (m1_RVALID == 1'b0) | (m0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72))) begin
        m2_RREADY = 1'b1;
    end else begin
        m2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        m2_WVALID = 1'b1;
    end else begin
        m2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m2_blk_n_AR = m_axi_m2_ARREADY;
    end else begin
        m2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        m2_blk_n_AW = m_axi_m2_AWREADY;
    end else begin
        m2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        m2_blk_n_B = m_axi_m2_BVALID;
    end else begin
        m2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        m2_blk_n_R = m_axi_m2_RVALID;
    end else begin
        m2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        m2_blk_n_W = m_axi_m2_WREADY;
    end else begin
        m2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if ((~((m2_RVALID == 1'b0) | (m1_RVALID == 1'b0) | (m0_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((icmp_ln9_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((m2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((m2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((m2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_fu_328_p2 = (dot_fu_322_p2 + empty_reg_185);

assign add_ln9_fu_274_p2 = (i_reg_174 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((m2_ARREADY == 1'b0) | (m1_ARREADY == 1'b0) | (m0_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state72 = ((m2_RVALID == 1'b0) | (m1_RVALID == 1'b0) | (m0_RVALID == 1'b0));
end

assign dot_fu_322_p0 = shiftreg10_reg_205[31:0];

assign dot_fu_322_p1 = shiftreg_reg_196[31:0];

assign icmp_ln9_fu_280_p2 = ((i_reg_174 == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln215_1_fu_308_p4 = {{shiftreg10_reg_205[255:32]}};

assign lshr_ln_fu_290_p4 = {{shiftreg_reg_196[255:32]}};

assign sext_ln691_fu_224_p1 = $signed(trunc_ln_fu_214_p4);

assign sext_ln9_1_fu_264_p1 = $signed(trunc_ln9_1_reg_346);

assign sext_ln9_fu_254_p1 = $signed(trunc_ln9_reg_341);

assign trunc_ln_fu_214_p4 = {{v[63:2]}};

assign zext_ln215_1_fu_318_p1 = lshr_ln215_1_fu_308_p4;

assign zext_ln215_fu_300_p1 = lshr_ln_fu_290_p4;

endmodule //kernel
